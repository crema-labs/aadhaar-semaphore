import {
  ArtifactsOrigin,
  generateArgs,
  init,
  InitArgs,
  packGroth16Proof,
  prove,
  verify,
} from "@anon-aadhaar/core";
import { Contract, JsonRpcProvider } from "ethers";
import fs from "fs";
import { ethers } from "hardhat";
import ABI from "../aadharAbi.json";

export const generatSampleProof = async () => {
  let certificate: string;
  let user1addres: string;

  const nullifierSeed = 1234;
  certificate = fs.readFileSync("uidai.pem").toString();

  console.log("here ..... ");
  // TODO CHANGE THIS TO LOCAL TO SERVER
  const anonAadhaarInitArgs: InitArgs = {
    wasmURL:
      "/Users/vikasrushi/aadhaar-semaphore/contracts/aadhaar-verifier.wasm",
    zkeyURL: "/Users/vikasrushi/aadhaar-semaphore/contracts/circuit_final.zkey",
    vkeyURL: "/Users/vikasrushi/aadhaar-semaphore/contracts/vkey.json",
    artifactsOrigin: ArtifactsOrigin.local,
  };

  const [user1] = await ethers.getSigners();
  user1addres = user1.address;

  await init(anonAadhaarInitArgs);

  const testQRData =
    "66273506516897627951860599351971591114355655723320287942461727132748419251008764193826959128584896771871102590897435489321021979264708557798284137941976610763157589438481430925297987648994726487175226985479707142957688708556086242323338818963048194860523398190581306958561327145986107983846817476742221520612127888578627073922031586462248406332090544962062179576728455991538607260681556338459159997007717595692869418844328111996968743978427562933624800646594733953403422807984800374502199677877015490260904699966257612181577827291489460070390210437776828902452480503093214276699992620321031420634682868212264417239320369813060869578069998076384632066050705810924899036530764170402027472540846778695948699270154875318548139195780907745060203728219845475251603559049547790948493642264341282295807579424180138332723042504728448999679263140592713284933590923940541127751219417935465165743567821688669427051964752846259734040989973250640835953969542901280485022679463798650800141207063721134651691448636801949638671580403325241830084327836069956760708623771721441782248535252044892632188677640061791099901326587428649571084431441114708712849833136170248545676922082569481857265694953290559958470597243117191455416177240487706418357371608974597435485572737729721529131107070752567683923402971355185983838665157213943376343263440718945450308483016887995591110477626565320060777066860997716891842544132848494735115297941609564779025495897073588170251757962203705444755185195712455614440128899271262793169950089989159055330203645989413258546759286370661201987976017352070290510053990478468419420728641476836097109756669538093406476750540624707753393585794384388572404185623450861538419638593987919307313962536626977785408484423780220818376302415913394495706077505625790478297121862442292072856885269794046756746892600461347728168766614908132250584557730111336727611136598204405269558908081977923406521247952964346494371608487636678636782436023691154217778851930420575081268212060654430671525905409251794170768320153246261017748537177273789896867508090366145870314598148929568117859028887761294944673993071480376000680646553943208535587557814700413240919080263967973067004380763861076868110965864266576373605326671761451332198926210129105933350137537964365202579984731386522144508714616296543069396412137624257842904207328245689216535380390216499211428292946940121396530075898597640137464933662157629766237369828644153469982620116370105681456665154784381194095241134948839229996761497907281420304038270378037648416168105094447235559312026957140915613032139587483939628663967825249653113513020010314225974818647952205058104981430742065173369935111376594240495624884987285682608230335786264284435590415653507506789952754517121258903339497285879284682804825464380469570645483850339164945456941001315174527983784249951598874018125071456610019374213139899876860005994722966801482930777228758272012111950667848595682194706085156276305280706801190148830524663664709199788793352867867824653307318084192680906078348852995506657958034199897491095225911465022390744293540020344642030480829591126016";

  const args = await generateArgs({
    qrData: testQRData,
    certificateFile: certificate,
    nullifierSeed: nullifierSeed,
    signal: user1addres,
    fieldsToRevealArray: [
      "revealAgeAbove18",
      "revealGender",
      "revealPinCode",
      "revealState",
    ],
  });

  const proof = await prove(args);
  const offChainVerify = await verify(proof);

  const provider = new JsonRpcProvider(
    "https://ethereum-sepolia.blockpi.network/v1/rpc/public"
  );
  const contractInstance = new Contract(
    "0xd59C20F74056080e5ac4B0f55bBd77ff75E7a16e", // Deployed AnonAaadhar contract address
    ABI.abi,
    provider
  );
  const packedGroth16Proof = packGroth16Proof(proof.proof.groth16Proof);
  const onChainVerify = await contractInstance.verifyAnonAadhaarProof(
    // above18GroupId,
    proof.proof.nullifierSeed, // string
    proof.proof.nullifier,
    proof.proof.timestamp,
    user1addres,
    [
      proof.proof.ageAbove18,
      proof.proof.gender,
      proof.proof.pincode,
      proof.proof.state,
    ],
    packedGroth16Proof
  );

  console.log(onChainVerify, offChainVerify);
  return { proof: proof.proof, user1addres: 1 };
};

// So when verifying real data the right contract address is

// Instead of

// 0x6bE8Cec7a06BA19c39ef328e8c8940cEfeF7E281
// // TODO we can use HASH(PUBLIC_KEY) as the identity
// const createIdentity = async () => {
//   console.log("here ..... ");
//   const id1 = new Identity();
//   const semaphoreSubgraph = new SemaphoreSubgraph();
//   const groupMembers = await semaphoreSubgraph.getGroupMembers("25");

//   const registerContract = new RegisterContract();
//   await registerContract.addMemberToGroup(25, id1.commitment);

//   const group = new Group(groupMembers);
//   group.addMember(id1.commitment);
//   const message = encodeBytes32String("Hello World");
//   const proofSemaphore = await generateProof(id1, group, message, 25);
//   const { proof, user1addres } = AadharProofJson;

//   const packedGroth16Proof = packGroth16Proof(proof.groth16Proof);

//   const c = new Contract(
//     "0x9185A1c6F7Cb004DBB5883eD9cb8CBed85ab34fD",
//     RegisterABI,
//     signer
//   );

//   const tx = await c.sendMessageInAbove18Group(
//     // above18GroupId,
//     proof.nullifierSeed, // string
//     proof.nullifier,
//     proof.timestamp,
//     user1addres,
//     [proof.ageAbove18, proof.gender, proof.pincode, proof.state],
//     packedGroth16Proof,

//     // ARGS
//     proofSemaphore.merkleTreeDepth,
//     proofSemaphore.merkleTreeRoot,
//     proofSemaphore.nullifier,
//     message,
//     proofSemaphore.points,
//     {
//       gasLimit: 300000, // Increase this value as needed
//     }
//   );

//   console.log(tx);
//   // const aadharProof = await

//   // const contract = new Contract();
// };
